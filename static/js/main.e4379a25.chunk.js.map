{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","class","htmlFor","modeName","TextForm","useState","text","setText","heading","onChange","event","console","log","target","value","rows","showAlert","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","ans","role","msg","App","setModeName","setMode","alert","setAlert","message","setTimeout","body","style","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4379a25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title} \r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n            <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeName}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = { title: PropTypes.string }","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    props.showAlert(\"Converted to uppercase succesfully\", \"Success\")\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const handleExtraSpaces = () =>{\r\n    props.showAlert(\"Extra spaces removed\", \"Success\")\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  }\r\n  const handleCopy = () =>\r\n  {\r\n    props.showAlert(\"copied to clipboard\", \"Success\")\r\n    var text = document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value)\r\n  }\r\n  const handleOnChange = (event) => {\r\n    console.log(\"Enter text here\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleLowClick = () => {\r\n    props.showAlert(\"Converted to lowercase succesfully\", \"Success\")\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const handleClearClick = () => {\r\n    props.showAlert(\"   cleared succesfully\", \"Success\")\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container my-5\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">{props.heading}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            onChange={handleOnChange}\r\n            rows=\"20\"\r\n            value={text}\r\n          ></textarea>\r\n          <br />\r\n          <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n            Convert to upprcase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n            Convert to lowercase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n            Clear Text\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n            Copy Text\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n            Remove Extra Spaces\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark': 'light'} container my-3`}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text===''? '0':text.split(\" \").length} words and {text.length} characters{\" \"}\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n        <h2>preview</h2>\r\n        <p>{text===''?'Enter your text to preview':text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n\r\n            props.ans && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{props.ans.type}</strong>:{props.ans.msg}\r\n                \r\n            </div> \r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Textform from './components/Textform';\r\nimport React, { useState } from 'react'\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [modeName, setModeName] = useState('Enter dark mode')\r\n  const [mode, setMode] = useState('light')\r\n  const [alert, setAlert] = useState(null)\r\n  const showAlert = (message, type) =>\r\n  {\r\n\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() =>{\r\n      setAlert(null);\r\n    },1500);\r\n  }\r\n  const toggleMode = () =>{\r\n    \r\n    if (mode==='light') {\r\n      setMode('dark');\r\n      setModeName('Enter to light mode');\r\n      document.body.style.background='#343b42';\r\n      showAlert(\"Dark mode has been enabled\", \"success\")\r\n    }\r\n    else\r\n    {\r\n      setModeName('Enter to Dark mode')\r\n      setMode('light')\r\n      document.body.style.background='#e6e8eb';\r\n      showAlert(\"Light mode has been enabled\", \"success\")\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n  <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} modeName={modeName}></Navbar>\r\n    {/* <div className=\"container\"><Textform heading=\"Enter the text to analyze !\"></Textform></div> */}\r\n    <Alert ans={alert}></Alert>\r\n\r\n    <Textform showAlert={showAlert} mode={mode}/>\r\n\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}